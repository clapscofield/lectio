import React, { useState } from "react";
import { readString } from "react-papaparse";
import goodreadsSentiment from "../../../assets/csv/goodreads_reviews_sentiment.csv";
import PropTypes from "prop-types";
import { alpha } from "@mui/material/styles";
import Box from "@mui/material/Box";
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import TableHead from "@mui/material/TableHead";
import TablePagination from "@mui/material/TablePagination";
import TableRow from "@mui/material/TableRow";
import TableSortLabel from "@mui/material/TableSortLabel";
import Toolbar from "@mui/material/Toolbar";
import Typography from "@mui/material/Typography";
import Paper from "@mui/material/Paper";
import IconButton from "@mui/material/IconButton";
import Tooltip from "@mui/material/Tooltip";
import { visuallyHidden } from "@mui/utils";
import Icon from "@mui/material/Icon";

export default function PlnSentimentCsv() {
  function descendingComparator(a, b, orderBy) {
    if (b[orderBy] < a[orderBy]) {
      return -1;
    }
    if (b[orderBy] > a[orderBy]) {
      return 1;
    }
    return 0;
  }

  function getComparator(order, orderBy) {
    return order === "desc"
      ? (a, b) => descendingComparator(a, b, orderBy)
      : (a, b) => -descendingComparator(a, b, orderBy);
  }

  function stableSort(array, comparator) {
    const stabilizedThis = array.map((el, index) => [el, index]);
    stabilizedThis.sort((a, b) => {
      const order = comparator(a[0], b[0]);
      if (order !== 0) {
        return order;
      }
      return a[1] - b[1];
    });
    return stabilizedThis.map((el) => el[0]);
  }

  //id	rating	votes	read_at	read_count	comments_count	book_id	review_text	user_id	user_name	user_location	read_status	review_language	review_body	compound	neg	neu	pos	tb_Pol	tb_Subj
  const headCells = [
    {
      id: "id",
      numeric: true,
      disablePadding: true,
      label: "ID"
    },
    {
      id: "rating",
      numeric: true,
      disablePadding: false,
      label: "Rating"
    },
    {
      id: "read_at",
      numeric: false,
      disablePadding: false,
      label: "Data leitura"
    },
    {
      id: "read_count",
      numeric: true,
      disablePadding: false,
      label: "N. de leituras"
    },
    {
      id: "comments_count",
      numeric: true,
      disablePadding: false,
      label: "Número de comentários"
    },
    {
      id: "book_id",
      numeric: true,
      disablePadding: false,
      label: "Id livro"
    },
    {
      id: "review_text",
      numeric: false,
      disablePadding: false,
      label: "Texto Review"
    },
    {
      id: "user_id",
      numeric: true,
      disablePadding: false,
      label: "Id user"
    },
    {
      id: "user_name",
      numeric: true,
      disablePadding: false,
      label: "Nome user"
    },
    {
      id: "user_location",
      numeric: true,
      disablePadding: false,
      label: "Localização user"
    },
    {
      id: "read_status",
      numeric: false,
      disablePadding: false,
      label: "Status"
    },
    {
      id: "review_language",
      numeric: false,
      disablePadding: false,
      label: "Idioma review"
    },
    {
      id: "review_body",
      numeric: false,
      disablePadding: false,
      label: "Texto review"
    },
    {
      id: "compound",
      numeric: true,
      disablePadding: false,
      label: "Compound"
    },
    {
      id: "neg",
      numeric: true,
      disablePadding: false,
      label: "Negativo"
    },
    {
      id: "neu",
      numeric: true,
      disablePadding: false,
      label: "Neutro"
    },
    {
      id: "pos",
      numeric: true,
      disablePadding: false,
      label: "Positivo"
    },
    {
      id: "tb_Pol",
      numeric: true,
      disablePadding: false,
      label: "TextBlob Polaridade"
    },
    {
      id: "tb_Subj",
      numeric: true,
      disablePadding: false,
      label: "TextBlob Subjetividade"
    }
  ];

  function EnhancedTableHead(props) {
    const { order, orderBy, onRequestSort } = props;

    const createSortHandler = (property) => (event) => {
      onRequestSort(event, property);
    };

    return (
      <TableHead>
        <TableRow>
          {headCells.map((headCell) => (
            <TableCell
              key={headCell.id}
              align={headCell.numeric ? "right" : "left"}
              padding={headCell.disablePadding ? "none" : "normal"}
              sortDirection={orderBy === headCell.id ? order : false}
            >
              <TableSortLabel
                active={orderBy === headCell.id}
                direction={orderBy === headCell.id ? order : "asc"}
                onClick={createSortHandler(headCell.id)}
              >
                {headCell.label}
                {orderBy === headCell.id ? (
                  <Box component="span" sx={visuallyHidden}>
                    {order === "desc" ? "sorted descending" : "sorted ascending"}
                  </Box>
                ) : null}
              </TableSortLabel>
            </TableCell>
          ))}
        </TableRow>
      </TableHead>
    );
  }

  EnhancedTableHead.propTypes = {
    onRequestSort: PropTypes.func.isRequired,
    order: PropTypes.oneOf(["asc", "desc"]).isRequired,
    orderBy: PropTypes.string.isRequired
  };

  const EnhancedTableToolbar = (props) => {
    //const { numSelected } = props;

    return (
      <Toolbar
        sx={{
          pl: { sm: 2 },
          pr: { xs: 1, sm: 1 },
          ...{
            bgcolor: (theme) => alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity)
          }
        }}
      >
        <Typography sx={{ flex: "1 1 100%" }} variant="h6" id="tableTitle" component="div">
          goodreads_reviews_sentiment.csv
        </Typography>

        <Tooltip title="Filter list">
          <IconButton>
            <Icon baseClassName="fas" className="fa-regular fa-filter" />
          </IconButton>
        </Tooltip>
      </Toolbar>
    );
  };

  EnhancedTableToolbar.propTypes = {
    numSelected: PropTypes.number.isRequired
  };

  const [order, setOrder] = React.useState("asc");
  const [orderBy, setOrderBy] = React.useState("titulo");
  const [selected, setSelected] = React.useState([]);
  const [page, setPage] = React.useState(0);
  const [rowsPerPage, setRowsPerPage] = React.useState(5);
  const [rows, setRows] = useState([]);
  const dados = [];

  function readCsv() {
    const linhaTemp = [];
    const papaConfig = {
      delimiter: ";",
      header: "true",
      complete: (results, file) => {
        //setDados(results.data);
        dados.push(results.data);
        dados[0].forEach((item) => {
          linhaTemp.push(item);
        });
        setRows(linhaTemp);
        console.log("linhas: ", rows);
      },
      download: true,
      error: (error, file) => {
        console.log("Error while parsing:", error, file);
      }
    };

    readString(goodreadsSentiment, papaConfig);
  }

  const handleRequestSort = (event, property) => {
    const isAsc = orderBy === property && order === "asc";
    setOrder(isAsc ? "desc" : "asc");
    setOrderBy(property);
  };

  const handleClick = (event, name) => {
    const selectedIndex = selected.indexOf(name);
    let newSelected = [];

    if (selectedIndex === -1) {
      newSelected = newSelected.concat(selected, name);
    } else if (selectedIndex === 0) {
      newSelected = newSelected.concat(selected.slice(1));
    } else if (selectedIndex === selected.length - 1) {
      newSelected = newSelected.concat(selected.slice(0, -1));
    } else if (selectedIndex > 0) {
      newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));
    }

    setSelected(newSelected);
  };

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };


  // Avoid a layout jump when reaching the last page with empty rows.
  const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;

  readCsv();

  return (
    <>
      <Box sx={{ width: "100%" }}>
        <Paper sx={{ width: "100%", mb: 2 }}>
          <EnhancedTableToolbar numSelected={selected.length} />
          <TableContainer>
            <Table sx={{ minWidth: 750 }} aria-labelledby="tableTitle" size={"small"}>
              <EnhancedTableHead order={order} orderBy={orderBy} onRequestSort={handleRequestSort} />
              <TableBody>
                {stableSort(rows, getComparator(order, orderBy))
                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                  .map((row, index) => {
                    const labelId = `enhanced-table-checkbox-${index}`;

                    return (
                      <TableRow
                        hover
                        onClick={(event) => handleClick(event, row.id)}
                        role="checkbox"
                        tabIndex={-1}
                        key={row.id}
                      >
                        <TableCell component="th" id={labelId} scope="row" padding="none">
                          {row.id}
                        </TableCell>
                        <TableCell align="right">{row.rating}</TableCell>
                        <TableCell align="right">{row.votes}</TableCell>
                        <TableCell align="right">{row.read_at}</TableCell>
                        <TableCell align="right">{row.read_count}</TableCell>
                        <TableCell align="right">{row.comments_count}</TableCell>
                        <TableCell align="right">{row.book_id}</TableCell>
                        <TableCell align="right">{row.review_text}</TableCell>
                        <TableCell align="right">{row.user_id}</TableCell>
                        <TableCell align="right">{row.user_name}</TableCell>
                        <TableCell align="right">{row.user_location}</TableCell>
                        <TableCell align="right">{row.read_status}</TableCell>
                        <TableCell align="right">{row.review_language}</TableCell>
                        <TableCell align="right">{row.review_body}</TableCell>
                        <TableCell align="right">{row.compound}</TableCell>
                        <TableCell align="right">{row.neg}</TableCell>
                        <TableCell align="right">{row.neu}</TableCell>
                        <TableCell align="right">{row.pos}</TableCell>
                        <TableCell align="right">{row.tb_Pol}</TableCell>
                        <TableCell align="right">{row.tb_Subj}</TableCell>
                      </TableRow>
                    );
                  })}
                {emptyRows > 0 && (
                  <TableRow>
                    <TableCell colSpan={6} />
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </TableContainer>
          <TablePagination
            rowsPerPageOptions={[5, 10, 25]}
            component="div"
            count={rows.length}
            rowsPerPage={rowsPerPage}
            page={page}
            onPageChange={handleChangePage}
            onRowsPerPageChange={handleChangeRowsPerPage}
          />
        </Paper>
      </Box>
    </>
  );
}
